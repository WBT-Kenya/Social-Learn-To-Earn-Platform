{
    "sourceFile": "src/routes/contractRoutes.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1699971155573,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1699971162139,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,9 @@\n           .addHbarTransfer(wallet.getAccountId(), new Hbar(15).negated())\n           .addHbarTransfer(aliasAccountId, new Hbar(15))\n           .freezeWithSigner(wallet);\n           \n-        transaction = await transaction.set(180).signWithSigner(wallet);\n+        transaction = await transaction(180).signWithSigner(wallet);\n   \n         const response = await transaction.executeWithSigner(wallet);\n         await response.getReceiptWithSigner(wallet);\n   \n"
                },
                {
                    "date": 1700130001947,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n   const operatorId = AccountId.fromString(process.env.OPERATOR_ID);\n   const operatorKey = PrivateKey.fromString(process.env.OPERATOR_PVKEY);\n   const treasuryId = AccountId.fromString(process.env.TREASURY_ID);\n   const treasuryKey = PrivateKey.fromString(process.env.TREASURY_PVKEY);\n-  const numAccountsToCreate = 1; // Change this to the number of accounts you want to create\n+  const numAccountsToCreate = 10; // Change this to the number of accounts you want to create\n   \n   const client = Client.forTestnet().setOperator(operatorId, operatorKey);\n   \n   // Define the handler function\n@@ -56,9 +56,9 @@\n           .addHbarTransfer(wallet.getAccountId(), new Hbar(15).negated())\n           .addHbarTransfer(aliasAccountId, new Hbar(15))\n           .freezeWithSigner(wallet);\n           \n-        transaction = await transaction(180).signWithSigner(wallet);\n+        transaction = await transaction.signWithSigner(wallet);\n   \n         const response = await transaction.executeWithSigner(wallet);\n         await response.getReceiptWithSigner(wallet);\n   \n"
                },
                {
                    "date": 1700130007666,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n   const operatorId = AccountId.fromString(process.env.OPERATOR_ID);\n   const operatorKey = PrivateKey.fromString(process.env.OPERATOR_PVKEY);\n   const treasuryId = AccountId.fromString(process.env.TREASURY_ID);\n   const treasuryKey = PrivateKey.fromString(process.env.TREASURY_PVKEY);\n-  const numAccountsToCreate = 10; // Change this to the number of accounts you want to create\n+  const numAccountsToCreate = 5// Change this to the number of accounts you want to create\n   \n   const client = Client.forTestnet().setOperator(operatorId, operatorKey);\n   \n   // Define the handler function\n"
                },
                {
                    "date": 1700130013518,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n   const operatorId = AccountId.fromString(process.env.OPERATOR_ID);\n   const operatorKey = PrivateKey.fromString(process.env.OPERATOR_PVKEY);\n   const treasuryId = AccountId.fromString(process.env.TREASURY_ID);\n   const treasuryKey = PrivateKey.fromString(process.env.TREASURY_PVKEY);\n-  const numAccountsToCreate = 5// Change this to the number of accounts you want to create\n+  const numAccountsToCreate = 10; // Change this to the number of accounts you want to create\n   \n   const client = Client.forTestnet().setOperator(operatorId, operatorKey);\n   \n   // Define the handler function\n"
                }
            ],
            "date": 1699971155573,
            "name": "Commit-0",
            "content": "const { Router } = require('express');\nrequire(\"dotenv\").config();\n\nconst router = Router();\n\n\nconst {\n    Wallet,\n    LocalProvider,\n    PrivateKey,\n    PublicKey,\n    Hbar,\n    AccountId,\n    AccountBalanceQuery,\n    AccountInfoQuery,\n    TransferTransaction,\n    Client,\n  } = require(\"@hashgraph/sdk\");\n  \n  const operatorId = AccountId.fromString(process.env.OPERATOR_ID);\n  const operatorKey = PrivateKey.fromString(process.env.OPERATOR_PVKEY);\n  const treasuryId = AccountId.fromString(process.env.TREASURY_ID);\n  const treasuryKey = PrivateKey.fromString(process.env.TREASURY_PVKEY);\n  const numAccountsToCreate = 1; // Change this to the number of accounts you want to create\n  \n  const client = Client.forTestnet().setOperator(operatorId, operatorKey);\n  \n  // Define the handler function\n  const handler = async (req, res) => {\n    try {\n      if (process.env.OPERATOR_ID == null || process.env.OPERATOR_PVKEY == null) {\n        throw new Error(\n          \"Environment variables OPERATOR_ID and OPERATOR_PVKEY are required.\"\n        );\n      }\n  \n      const wallet = new Wallet(\n        process.env.OPERATOR_ID,\n        process.env.OPERATOR_PVKEY,\n        new LocalProvider()\n      );\n      const accounts = [];\n      for (let i = 0; i < numAccountsToCreate; i++) {\n        console.log(`Creating alias account ${i + 1}`);\n  \n        const privateKey = PrivateKey.generateED25519();\n        const publicKey = privateKey.publicKey;\n  \n        const aliasAccountId = publicKey.toAccountId(0, 0);\n  \n        console.log(`New account ID: ${aliasAccountId.toString()}`);\n        console.log(`The aliasKey: ${aliasAccountId.aliasKey.toString()}`);\n  \n        console.log(\"Transferring some Hbar to the new account\");\n        let transaction = await new TransferTransaction()\n          .addHbarTransfer(wallet.getAccountId(), new Hbar(15).negated())\n          .addHbarTransfer(aliasAccountId, new Hbar(15))\n          .freezeWithSigner(wallet);\n          \n        transaction = await transaction.set(180).signWithSigner(wallet);\n  \n        const response = await transaction.executeWithSigner(wallet);\n        await response.getReceiptWithSigner(wallet);\n  \n        const balance = await new AccountBalanceQuery()\n          .setNodeAccountIds([response.nodeId])\n          .setAccountId(aliasAccountId)\n          .executeWithSigner(wallet);\n        const new_account = {\n          account_id: `${aliasAccountId.toString()}`,\n          balance: balance,\n        };\n        accounts.push(new_account);\n        console.log(`Balances of the new account: ${balance.toString()}`);\n  \n        const info = await new AccountInfoQuery()\n          .setNodeAccountIds([response.nodeId])\n          .setAccountId(aliasAccountId)\n          .executeWithSigner(wallet);\n  \n        console.log(`Info about the new account: ${info.toString()}`);\n      }\n  \n      console.log(\"All accounts created and funded!\");\n  \n      // Respond with a success message\n      return res\n        .status(200)\n        .json({ message: \"All accounts created and funded!\", data: accounts });\n    } catch (error) {\n      // Handle errors and respond with an error message\n      console.error(error);\n      res.status(500).send(\"Internal Server Error\");\n    }\n  };\n  \n  // Define a route for the handler\n  router.get(\"/create-accounts\", handler);\n\nmodule.exports = router;"
        }
    ]
}