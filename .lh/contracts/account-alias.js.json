{
    "sourceFile": "contracts/account-alias.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1698734788365,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1698734808961,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,4 +75,102 @@\n //     // Perform concurrent transfers or other operations here if needed\n // }\n \n // main();\n+\n+const express = require('express');\n+const app = express();\n+\n+// Load environment variables from .env file\n+require('dotenv').config();\n+\n+const {\n+    Wallet,\n+    LocalProvider,\n+    PrivateKey,\n+    PublicKey,\n+    Hbar,\n+    AccountId,\n+    AccountBalanceQuery,\n+    AccountInfoQuery,\n+    TransferTransaction,\n+    Client\n+} = require(\"@hashgraph/sdk\");\n+\n+const operatorId = AccountId.fromString(process.env.OPERATOR_ID);\n+const operatorKey = PrivateKey.fromString(process.env.OPERATOR_PVKEY);\n+const treasuryId = AccountId.fromString(process.env.TREASURY_ID);\n+const treasuryKey = PrivateKey.fromString(process.env.TREASURY_PVKEY);\n+const numAccountsToCreate = 10; // Change this to the number of accounts you want to create\n+\n+const client = Client.forTestnet().setOperator(operatorId, operatorKey);\n+\n+// Define the handler function\n+const handler = async (req, res) => {\n+    try {\n+        if (process.env.OPERATOR_ID == null || process.env.OPERATOR_PVKEY == null) {\n+            throw new Error(\n+                \"Environment variables OPERATOR_ID and OPERATOR_PVKEY are required.\"\n+            );\n+        }\n+\n+        const wallet = new Wallet(\n+            process.env.OPERATOR_ID,\n+            process.env.OPERATOR_PVKEY,\n+            new LocalProvider()\n+        );\n+\n+        for (let i = 0; i < numAccountsToCreate; i++) {\n+            console.log(`Creating alias account ${i + 1}`);\n+    \n+            const privateKey = PrivateKey.generateED25519();\n+            const publicKey = privateKey.publicKey;\n+    \n+            const aliasAccountId = publicKey.toAccountId(0, 0);\n+    \n+            console.log(`New account ID: ${aliasAccountId.toString()}`);\n+            console.log(`The aliasKey: ${aliasAccountId.aliasKey.toString()}`);\n+    \n+            console.log(\"Transferring some Hbar to the new account\");\n+            let transaction = await new TransferTransaction()\n+                .addHbarTransfer(wallet.getAccountId(), new Hbar(15).negated())\n+                .addHbarTransfer(aliasAccountId, new Hbar(15))\n+                .freezeWithSigner(wallet);\n+            transaction = await transaction.signWithSigner(wallet);\n+    \n+            const response = await transaction.executeWithSigner(wallet);\n+            await response.getReceiptWithSigner(wallet);\n+    \n+            const balance = await new AccountBalanceQuery()\n+                .setNodeAccountIds([response.nodeId])\n+                .setAccountId(aliasAccountId)\n+                .executeWithSigner(wallet);\n+    \n+            console.log(`Balances of the new account: ${balance.toString()}`);\n+    \n+            const info = await new AccountInfoQuery()\n+                .setNodeAccountIds([response.nodeId])\n+                .setAccountId(aliasAccountId)\n+                .executeWithSigner(wallet);\n+    \n+            console.log(`Info about the new account: ${info.toString()}`);\n+        }\n+    \n+        console.log(\"All accounts created and funded!\");\n+    \n+        // Respond with a success message\n+        res.status(200).send(\"All accounts created and funded!\");\n+    } catch (error) {\n+        // Handle errors and respond with an error message\n+        console.error(error);\n+        res.status(500).send(\"Internal Server Error\");\n+    }\n+};\n+\n+// Define a route for the handler\n+app.get('/create-accounts', handler);\n+\n+// Start the Express app on port 8080 (or your desired port)\n+const PORT = process.env.PORT || 8080;\n+app.listen(PORT, () => {\n+    console.log(`Server is listening on port ${PORT}`);\n+});\n"
                },
                {
                    "date": 1698737342516,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,81 +1,6 @@\n-// require('dotenv').config(); // Load environment variables from .env file\n \n-// const {\n-//     Wallet,\n-//     LocalProvider,\n-//     PrivateKey,\n-//     PublicKey,\n-//     Hbar,\n-//     AccountId,\n-//     AccountBalanceQuery,\n-//     AccountInfoQuery,\n-//     TransferTransaction,\n-//     Client\n-// } = require(\"@hashgraph/sdk\");\n \n-// const operatorId = AccountId.fromString(process.env.OPERATOR_ID);\n-// const operatorKey = PrivateKey.fromString(process.env.OPERATOR_PVKEY);\n-// const treasuryId = AccountId.fromString(process.env.TREASURY_ID);\n-// const treasuryKey = PrivateKey.fromString(process.env.TREASURY_PVKEY);\n-// const numAccountsToCreate = 10; // Change this to the number of accounts you want to create\n-\n-// const client = Client.forTestnet().setOperator(operatorId, operatorKey);\n-\n-// async function main() {\n-//     if (process.env.OPERATOR_ID == null || process.env.OPERATOR_PVKEY == null) {\n-//         throw new Error(\n-//             \"Environment variables OPERATOR_ID and OPERATOR_PVKEY are required.\"\n-//         );\n-//     }\n-\n-//     const wallet = new Wallet(\n-//         process.env.OPERATOR_ID,\n-//         process.env.OPERATOR_PVKEY,\n-//         new LocalProvider()\n-//     );\n-\n-//     for (let i = 0; i < numAccountsToCreate; i++) {\n-//         console.log(`Creating alias account ${i + 1}`);\n-\n-//         const privateKey = PrivateKey.generateED25519();\n-//         const publicKey = privateKey.publicKey;\n-\n-//         const aliasAccountId = publicKey.toAccountId(0, 0);\n-\n-//         console.log(`New account ID: ${aliasAccountId.toString()}`);\n-//         console.log(`The aliasKey: ${aliasAccountId.aliasKey.toString()}`);\n-\n-//         console.log(\"Transferring some Hbar to the new account\");\n-//         let transaction = await new TransferTransaction()\n-//             .addHbarTransfer(wallet.getAccountId(), new Hbar(15).negated())\n-//             .addHbarTransfer(aliasAccountId, new Hbar(15))\n-//             .freezeWithSigner(wallet);\n-//         transaction = await transaction.signWithSigner(wallet);\n-\n-//         const response = await transaction.executeWithSigner(wallet);\n-//         await response.getReceiptWithSigner(wallet);\n-\n-//         const balance = await new AccountBalanceQuery()\n-//             .setNodeAccountIds([response.nodeId])\n-//             .setAccountId(aliasAccountId)\n-//             .executeWithSigner(wallet);\n-\n-//         console.log(`Balances of the new account: ${balance.toString()}`);\n-\n-//         const info = await new AccountInfoQuery()\n-//             .setNodeAccountIds([response.nodeId])\n-//             .setAccountId(aliasAccountId)\n-//             .executeWithSigner(wallet);\n-\n-//         console.log(`Info about the new account: ${info.toString()}`);\n-//     }\n-\n-//     console.log(\"All accounts created and funded!\");\n-\n-//     // Perform concurrent transfers or other operations here if needed\n-// }\n-\n // main();\n \n const express = require('express');\n const app = express();\n"
                },
                {
                    "date": 1698737348826,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,5 @@\n \n-\n-// main();\n-\n const express = require('express');\n const app = express();\n \n // Load environment variables from .env file\n"
                }
            ],
            "date": 1698734788364,
            "name": "Commit-0",
            "content": "// require('dotenv').config(); // Load environment variables from .env file\n\n// const {\n//     Wallet,\n//     LocalProvider,\n//     PrivateKey,\n//     PublicKey,\n//     Hbar,\n//     AccountId,\n//     AccountBalanceQuery,\n//     AccountInfoQuery,\n//     TransferTransaction,\n//     Client\n// } = require(\"@hashgraph/sdk\");\n\n// const operatorId = AccountId.fromString(process.env.OPERATOR_ID);\n// const operatorKey = PrivateKey.fromString(process.env.OPERATOR_PVKEY);\n// const treasuryId = AccountId.fromString(process.env.TREASURY_ID);\n// const treasuryKey = PrivateKey.fromString(process.env.TREASURY_PVKEY);\n// const numAccountsToCreate = 10; // Change this to the number of accounts you want to create\n\n// const client = Client.forTestnet().setOperator(operatorId, operatorKey);\n\n// async function main() {\n//     if (process.env.OPERATOR_ID == null || process.env.OPERATOR_PVKEY == null) {\n//         throw new Error(\n//             \"Environment variables OPERATOR_ID and OPERATOR_PVKEY are required.\"\n//         );\n//     }\n\n//     const wallet = new Wallet(\n//         process.env.OPERATOR_ID,\n//         process.env.OPERATOR_PVKEY,\n//         new LocalProvider()\n//     );\n\n//     for (let i = 0; i < numAccountsToCreate; i++) {\n//         console.log(`Creating alias account ${i + 1}`);\n\n//         const privateKey = PrivateKey.generateED25519();\n//         const publicKey = privateKey.publicKey;\n\n//         const aliasAccountId = publicKey.toAccountId(0, 0);\n\n//         console.log(`New account ID: ${aliasAccountId.toString()}`);\n//         console.log(`The aliasKey: ${aliasAccountId.aliasKey.toString()}`);\n\n//         console.log(\"Transferring some Hbar to the new account\");\n//         let transaction = await new TransferTransaction()\n//             .addHbarTransfer(wallet.getAccountId(), new Hbar(15).negated())\n//             .addHbarTransfer(aliasAccountId, new Hbar(15))\n//             .freezeWithSigner(wallet);\n//         transaction = await transaction.signWithSigner(wallet);\n\n//         const response = await transaction.executeWithSigner(wallet);\n//         await response.getReceiptWithSigner(wallet);\n\n//         const balance = await new AccountBalanceQuery()\n//             .setNodeAccountIds([response.nodeId])\n//             .setAccountId(aliasAccountId)\n//             .executeWithSigner(wallet);\n\n//         console.log(`Balances of the new account: ${balance.toString()}`);\n\n//         const info = await new AccountInfoQuery()\n//             .setNodeAccountIds([response.nodeId])\n//             .setAccountId(aliasAccountId)\n//             .executeWithSigner(wallet);\n\n//         console.log(`Info about the new account: ${info.toString()}`);\n//     }\n\n//     console.log(\"All accounts created and funded!\");\n\n//     // Perform concurrent transfers or other operations here if needed\n// }\n\n// main();\n"
        }
    ]
}